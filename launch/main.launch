<launch>

  <arg name="sim" default="true"/>
  <arg name="robot_model" default="px100"/>
  <arg name="dof" default="4"/>
  <arg name="world_name" default="$(find robomaker_workshop)/worlds/px100-0.world"/>


  <!-- This group gets executed only when sim is true -->
  <group if="$(arg sim)">
    
    <!-- Publish statics and visuals of robot arm via .urdf.xacro -->
    <include file="$(find robomaker_workshop)/launch/px100.launch" />
    
    <!-- Bring up simulation environment -->
    <include file="$(find robomaker_workshop)/launch/simulation.launch">
      <arg name="world_name" value="$(arg world_name)"/>
      <arg name="robot_model" value="$(arg robot_model)"/>
    </include>
    
    <!-- TODO: see if controllers are only needed during sim -->
    <!-- Publish dynamics for the robot, tune PID controls here -->
    <rosparam file="$(find robomaker_workshop)/config/controllers.yaml" command="load" ns="$(arg robot_model)"/>
    <node pkg="controller_manager" name="controller_spawner" type="controller_manager" respawn="false" output="screen"
      ns="$(arg robot_model)" args="spawn arm_controller gripper_controller joint_state_controller"/>
  
    <!-- TODO: see if moveit setup is only needed during sim -->
    <!-- Launch moveit planning integration -->
    <include file="$(find interbotix_xsarm_moveit)/launch/move_group.launch" ns="$(arg robot_model)">
      <arg name="robot_model"                       value="$(arg robot_model)"/>
      <arg name="dof"                               value="$(arg dof)"/>
      <arg name="fake_execution"                    value="false"/>
    </include>
    
    <!--Open Rviz visualiztion for the system -->
    <node name="rviz" pkg="rviz" type="rviz" respawn="false" output="screen"
      args="-f world -d $(find robomaker_workshop)/rviz/px100.rviz" ns="$(arg robot_model)">
    </node>
    
    <!-- Set robot to initial position -->
    <node pkg="robomaker_workshop" name="init" type="init.py" output="screen" />
  </group>
  
  
   <!-- This group gets executed only when sim is false -->
  <group unless="$(arg sim)">
    <!-- Extract local USB camera stream and publish to ROS -->
    <include file="$(find robomaker_workshop)/launch/camera.launch" ns="$(arg robot_model)" />
  </group>
	
	
	 <!--Everything here gets executed regardless of the state of sim -->
	 
  <!-- Start image view node for taking camera shots -->
  <node name="image_saver" pkg="image_view" type="image_saver" output="screen" ns="$(arg robot_model)">
    <remap from="image" to="camera/image_raw" />
    <param name="save_all_image" value="false" />
    <param name="filename_format" value="$(find robomaker_workshop)/scripts/image_%04d.png" />
  </node>
  
  <!-- Publish camera stream to Kinesis Video Streams -->
  <include file="$(find robomaker_workshop)/launch/kvstreamer.launch" ns="$(arg robot_model)" />



</launch>
